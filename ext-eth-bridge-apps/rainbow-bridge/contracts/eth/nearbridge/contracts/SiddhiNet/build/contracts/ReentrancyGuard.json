{
  "contractName": "ReentrancyGuard",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/gokulalex/Apps/eth_apps/SiddhiNet/contracts/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/gokulalex/Apps/eth_apps/SiddhiNet/contracts/ReentrancyGuard.sol\":{\"keccak256\":\"0x26c4185f20b7d1b8347eee127412dbb3209443124b47c5ca367d6f7e21aa82c3\",\"license\":\"Apache License 2.0\",\"urls\":[\"bzz-raw://6d9094abfb551c7f6bdd460a5ae9e6e37b71a61b0808526327cf969bfd96473d\",\"dweb:/ipfs/QmW3yZsMKy9rtRZ8UJrmVHD3hMCDQkFr4CsxSyqga3VW8m\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506001600081905550603f8060256000396000f3fe6080604052600080fdfea2646970667358221220ec6134f3f52f5a72c5ec1171646806d635540f9968c740a8136c54d213eb99fa64736f6c63430007060033",
  "deployedBytecode": "0x6080604052600080fdfea2646970667358221220ec6134f3f52f5a72c5ec1171646806d635540f9968c740a8136c54d213eb99fa64736f6c63430007060033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "869:1776:13:-:0;;;1769:54;;;;;;;;;;1688:1;1794:7;:22;;;;869:1776;;;;;;",
  "deployedSourceMap": "869:1776:13:-:0;;;;;",
  "source": "// SPDX-License-Identifier: Apache License 2.0\n\npragma solidity >=0.6.0 <0.8.0;\npragma experimental ABIEncoderV2;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\n \n contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n",
  "sourcePath": "/Users/gokulalex/Apps/eth_apps/SiddhiNet/contracts/ReentrancyGuard.sol",
  "ast": {
    "absolutePath": "/Users/gokulalex/Apps/eth_apps/SiddhiNet/contracts/ReentrancyGuard.sol",
    "exportedSymbols": {
      "ReentrancyGuard": [
        6604
      ]
    },
    "id": 6605,
    "license": "Apache License 2.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6565,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "48:31:13"
      },
      {
        "id": 6566,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "80:33:13"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 6567,
          "nodeType": "StructuredDocumentation",
          "src": "115:750:13",
          "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
        },
        "fullyImplemented": true,
        "id": 6604,
        "linearizedBaseContracts": [
          6604
        ],
        "name": "ReentrancyGuard",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 6570,
            "mutability": "constant",
            "name": "_NOT_ENTERED",
            "nodeType": "VariableDeclaration",
            "scope": 6604,
            "src": "1648:41:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 6568,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1648:7:13",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 6569,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1688:1:13",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 6573,
            "mutability": "constant",
            "name": "_ENTERED",
            "nodeType": "VariableDeclaration",
            "scope": 6604,
            "src": "1695:37:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 6571,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1695:7:13",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "32",
              "id": 6572,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1731:1:13",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2_by_1",
                "typeString": "int_const 2"
              },
              "value": "2"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 6575,
            "mutability": "mutable",
            "name": "_status",
            "nodeType": "VariableDeclaration",
            "scope": 6604,
            "src": "1739:23:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 6574,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1739:7:13",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 6582,
              "nodeType": "Block",
              "src": "1784:39:13",
              "statements": [
                {
                  "expression": {
                    "id": 6580,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 6578,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6575,
                      "src": "1794:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 6579,
                      "name": "_NOT_ENTERED",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6570,
                      "src": "1804:12:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1794:22:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 6581,
                  "nodeType": "ExpressionStatement",
                  "src": "1794:22:13"
                }
              ]
            },
            "id": 6583,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6576,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1781:2:13"
            },
            "returnParameters": {
              "id": 6577,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1784:0:13"
            },
            "scope": 6604,
            "src": "1769:54:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6602,
              "nodeType": "Block",
              "src": "2222:421:13",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 6589,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 6587,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6575,
                          "src": "2311:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 6588,
                          "name": "_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6573,
                          "src": "2322:8:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2311:19:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                        "id": 6590,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2332:33:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                          "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                        },
                        "value": "ReentrancyGuard: reentrant call"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                          "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                        }
                      ],
                      "id": 6586,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "2303:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 6591,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2303:63:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6592,
                  "nodeType": "ExpressionStatement",
                  "src": "2303:63:13"
                },
                {
                  "expression": {
                    "id": 6595,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 6593,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6575,
                      "src": "2441:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 6594,
                      "name": "_ENTERED",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6573,
                      "src": "2451:8:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2441:18:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 6596,
                  "nodeType": "ExpressionStatement",
                  "src": "2441:18:13"
                },
                {
                  "id": 6597,
                  "nodeType": "PlaceholderStatement",
                  "src": "2470:1:13"
                },
                {
                  "expression": {
                    "id": 6600,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 6598,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6575,
                      "src": "2614:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 6599,
                      "name": "_NOT_ENTERED",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6570,
                      "src": "2624:12:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2614:22:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 6601,
                  "nodeType": "ExpressionStatement",
                  "src": "2614:22:13"
                }
              ]
            },
            "documentation": {
              "id": 6584,
              "nodeType": "StructuredDocumentation",
              "src": "1829:364:13",
              "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."
            },
            "id": 6603,
            "name": "nonReentrant",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 6585,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2219:2:13"
            },
            "src": "2198:445:13",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 6605,
        "src": "869:1776:13"
      }
    ],
    "src": "48:2598:13"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "/Users/gokulalex/Apps/eth_apps/SiddhiNet/contracts/ReentrancyGuard.sol",
      "exportedSymbols": {
        "ReentrancyGuard": [
          6604
        ]
      },
      "license": "Apache License 2.0"
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            ">=",
            "0.6",
            ".0",
            "<",
            "0.8",
            ".0"
          ]
        },
        "id": 6565,
        "name": "PragmaDirective",
        "src": "48:31:13"
      },
      {
        "attributes": {
          "literals": [
            "experimental",
            "ABIEncoderV2"
          ]
        },
        "id": 6566,
        "name": "PragmaDirective",
        "src": "80:33:13"
      },
      {
        "attributes": {
          "abstract": false,
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "contract",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            6604
          ],
          "name": "ReentrancyGuard",
          "scope": 6605
        },
        "children": [
          {
            "attributes": {
              "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
            },
            "id": 6567,
            "name": "StructuredDocumentation",
            "src": "115:750:13"
          },
          {
            "attributes": {
              "constant": true,
              "mutability": "constant",
              "name": "_NOT_ENTERED",
              "scope": 6604,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "uint256",
              "visibility": "private"
            },
            "children": [
              {
                "attributes": {
                  "name": "uint256",
                  "type": "uint256"
                },
                "id": 6568,
                "name": "ElementaryTypeName",
                "src": "1648:7:13"
              },
              {
                "attributes": {
                  "hexvalue": "31",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "token": "number",
                  "type": "int_const 1",
                  "value": "1"
                },
                "id": 6569,
                "name": "Literal",
                "src": "1688:1:13"
              }
            ],
            "id": 6570,
            "name": "VariableDeclaration",
            "src": "1648:41:13"
          },
          {
            "attributes": {
              "constant": true,
              "mutability": "constant",
              "name": "_ENTERED",
              "scope": 6604,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "uint256",
              "visibility": "private"
            },
            "children": [
              {
                "attributes": {
                  "name": "uint256",
                  "type": "uint256"
                },
                "id": 6571,
                "name": "ElementaryTypeName",
                "src": "1695:7:13"
              },
              {
                "attributes": {
                  "hexvalue": "32",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "token": "number",
                  "type": "int_const 2",
                  "value": "2"
                },
                "id": 6572,
                "name": "Literal",
                "src": "1731:1:13"
              }
            ],
            "id": 6573,
            "name": "VariableDeclaration",
            "src": "1695:37:13"
          },
          {
            "attributes": {
              "constant": false,
              "mutability": "mutable",
              "name": "_status",
              "scope": 6604,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "uint256",
              "visibility": "private"
            },
            "children": [
              {
                "attributes": {
                  "name": "uint256",
                  "type": "uint256"
                },
                "id": 6574,
                "name": "ElementaryTypeName",
                "src": "1739:7:13"
              }
            ],
            "id": 6575,
            "name": "VariableDeclaration",
            "src": "1739:23:13"
          },
          {
            "attributes": {
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "modifiers": [
                null
              ],
              "name": "",
              "scope": 6604,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 6576,
                "name": "ParameterList",
                "src": "1781:2:13"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 6577,
                "name": "ParameterList",
                "src": "1784:0:13"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 6575,
                              "type": "uint256",
                              "value": "_status"
                            },
                            "id": 6578,
                            "name": "Identifier",
                            "src": "1794:7:13"
                          },
                          {
                            "attributes": {
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 6570,
                              "type": "uint256",
                              "value": "_NOT_ENTERED"
                            },
                            "id": 6579,
                            "name": "Identifier",
                            "src": "1804:12:13"
                          }
                        ],
                        "id": 6580,
                        "name": "Assignment",
                        "src": "1794:22:13"
                      }
                    ],
                    "id": 6581,
                    "name": "ExpressionStatement",
                    "src": "1794:22:13"
                  }
                ],
                "id": 6582,
                "name": "Block",
                "src": "1784:39:13"
              }
            ],
            "id": 6583,
            "name": "FunctionDefinition",
            "src": "1769:54:13"
          },
          {
            "attributes": {
              "name": "nonReentrant",
              "virtual": false,
              "visibility": "internal"
            },
            "children": [
              {
                "attributes": {
                  "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."
                },
                "id": 6584,
                "name": "StructuredDocumentation",
                "src": "1829:364:13"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 6585,
                "name": "ParameterList",
                "src": "2219:2:13"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "tryCall": false,
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                                  "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                                }
                              ],
                              "overloadedDeclarations": [
                                4294967278,
                                4294967278
                              ],
                              "referencedDeclaration": 4294967278,
                              "type": "function (bool,string memory) pure",
                              "value": "require"
                            },
                            "id": 6586,
                            "name": "Identifier",
                            "src": "2303:7:13"
                          },
                          {
                            "attributes": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "operator": "!=",
                              "type": "bool"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 6575,
                                  "type": "uint256",
                                  "value": "_status"
                                },
                                "id": 6587,
                                "name": "Identifier",
                                "src": "2311:7:13"
                              },
                              {
                                "attributes": {
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 6573,
                                  "type": "uint256",
                                  "value": "_ENTERED"
                                },
                                "id": 6588,
                                "name": "Identifier",
                                "src": "2322:8:13"
                              }
                            ],
                            "id": 6589,
                            "name": "BinaryOperation",
                            "src": "2311:19:13"
                          },
                          {
                            "attributes": {
                              "hexvalue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "token": "string",
                              "type": "literal_string \"ReentrancyGuard: reentrant call\"",
                              "value": "ReentrancyGuard: reentrant call"
                            },
                            "id": 6590,
                            "name": "Literal",
                            "src": "2332:33:13"
                          }
                        ],
                        "id": 6591,
                        "name": "FunctionCall",
                        "src": "2303:63:13"
                      }
                    ],
                    "id": 6592,
                    "name": "ExpressionStatement",
                    "src": "2303:63:13"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 6575,
                              "type": "uint256",
                              "value": "_status"
                            },
                            "id": 6593,
                            "name": "Identifier",
                            "src": "2441:7:13"
                          },
                          {
                            "attributes": {
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 6573,
                              "type": "uint256",
                              "value": "_ENTERED"
                            },
                            "id": 6594,
                            "name": "Identifier",
                            "src": "2451:8:13"
                          }
                        ],
                        "id": 6595,
                        "name": "Assignment",
                        "src": "2441:18:13"
                      }
                    ],
                    "id": 6596,
                    "name": "ExpressionStatement",
                    "src": "2441:18:13"
                  },
                  {
                    "id": 6597,
                    "name": "PlaceholderStatement",
                    "src": "2470:1:13"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 6575,
                              "type": "uint256",
                              "value": "_status"
                            },
                            "id": 6598,
                            "name": "Identifier",
                            "src": "2614:7:13"
                          },
                          {
                            "attributes": {
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 6570,
                              "type": "uint256",
                              "value": "_NOT_ENTERED"
                            },
                            "id": 6599,
                            "name": "Identifier",
                            "src": "2624:12:13"
                          }
                        ],
                        "id": 6600,
                        "name": "Assignment",
                        "src": "2614:22:13"
                      }
                    ],
                    "id": 6601,
                    "name": "ExpressionStatement",
                    "src": "2614:22:13"
                  }
                ],
                "id": 6602,
                "name": "Block",
                "src": "2222:421:13"
              }
            ],
            "id": 6603,
            "name": "ModifierDefinition",
            "src": "2198:445:13"
          }
        ],
        "id": 6604,
        "name": "ContractDefinition",
        "src": "869:1776:13"
      }
    ],
    "id": 6605,
    "name": "SourceUnit",
    "src": "48:2598:13"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.6+commit.7338295f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.3",
  "updatedAt": "2021-02-28T17:03:35.932Z",
  "devdoc": {
    "details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}